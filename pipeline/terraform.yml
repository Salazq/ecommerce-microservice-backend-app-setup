# Este pipeline se debe disparar manualmente.
trigger: none

pool:
  vmImage: ubuntu-latest

parameters:
- name: environment
  displayName: 'Select Environment'
  type: string
  default: 'dev'
  values:
  - dev
  - staging
  - prod

variables:
  - group: variable-group-taller
  - name: environmentPath
    value: 'terraform/environments/${{ parameters.environment }}'
  - name: aksResourceGroup
    value: '${{ parameters.environment }}-resource-group'
  - name: aksClusterName
    value: '${{ parameters.environment }}-aks-cluster'

stages:
- stage: Terraform_plan_apply_${{ parameters.environment }}
  displayName: 'Terraform Plan & Apply - ${{ parameters.environment }}'
  # Etapa √∫nica: Generar el plan y aplicar Terraform.
  jobs:
    - job: PlanAndApply
      continueOnError: false
      timeoutInMinutes: 30
      steps:
        # Paso 1: Instalar Terraform
        - task: TerraformInstaller@0
          inputs:
            terraformVersion: '1.5.7'
          displayName: 'Install Terraform'

        # Paso 2: Verificar versi√≥n
        - script: terraform --version
          displayName: 'Check Terraform version'        
          # Paso 3: Verificar estructura de directorios
        - script: |
            echo "Working with environment: ${{ parameters.environment }}"
            echo "Environment path: $(environmentPath)"
            echo "Current directory: $(System.DefaultWorkingDirectory)"
            ls -la $(System.DefaultWorkingDirectory)/ || dir $(System.DefaultWorkingDirectory)\
            ls -la $(System.DefaultWorkingDirectory)/$(environmentPath)/ || dir $(System.DefaultWorkingDirectory)\$(environmentPath)\ || echo "Directory not found"
            echo "Files in environment directory:"
            ls -la $(System.DefaultWorkingDirectory)/$(environmentPath)/*.tf $(System.DefaultWorkingDirectory)/$(environmentPath)/*.tfvars 2>/dev/null || dir $(System.DefaultWorkingDirectory)\$(environmentPath)\*.tf $(System.DefaultWorkingDirectory)\$(environmentPath)\*.tfvars 2>nul || echo "No .tf or .tfvars files found"
          displayName: 'Check directory structure and files'
        # Paso 4: Terraform init
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/$(environmentPath)'
            backendServiceArm: $(AZURE_ACCOUNT)
            backendAzureRmResourceGroupName: 'VM'
            backendAzureRmStorageAccountName: 'vmrecursos'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: '${{ parameters.environment }}-aks.tfstate'
          displayName: 'Terraform init'

        # Paso 5: Terraform validate
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/$(environmentPath)'
          displayName: 'Terraform validate'        # Paso 6: Terraform plan (usando task oficial)
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/$(environmentPath)'
            environmentServiceNameAzureRM: $(AZURE_ACCOUNT)
            commandOptions: '-out=plan.out -var-file=terraform.tfvars'
          displayName: 'Terraform Plan'

        # Paso 7: Publicar artefacto del plan
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/$(environmentPath)/plan.out'
            artifact: 'Plan-${{ parameters.environment }}'
            publishLocation: 'pipeline'
          displayName: 'Publish Plan Artifact'
          condition: succeeded()

        # Paso 8: Terraform apply
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/$(environmentPath)'
            environmentServiceNameAzureRM: $(AZURE_ACCOUNT)
            commandOptions: '-auto-approve plan.out'
          displayName: 'Terraform Apply - ${{ parameters.environment }}'        # Paso 9: Mostrar outputs
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'output'
            workingDirectory: '$(System.DefaultWorkingDirectory)/$(environmentPath)'
            environmentServiceNameAzureRM: $(AZURE_ACCOUNT)
          displayName: 'Show Terraform Outputs'
          continueOnError: true

        # Paso 10: Validar deployment
        - script: |
            echo "Deployment completed for environment: ${{ parameters.environment }}"
            echo "Validating deployment..."
            cd $(System.DefaultWorkingDirectory)/$(environmentPath)
            # Verificar estado de Terraform
            terraform show -json > terraform_state.json 2>/dev/null || echo "Could not export state"
            # Mostrar resumen de recursos creados
            terraform state list 2>/dev/null || echo "Could not list state"
            echo "Deployment validation completed"
          displayName: 'Validate Deployment'
          continueOnError: true

        # Paso 11: Cleanup temporal files
        - script: |
            cd $(System.DefaultWorkingDirectory)/$(environmentPath)
            # Limpiar archivos temporales pero conservar el estado
            rm -f plan.out terraform_state.json 2>/dev/null || del plan.out terraform_state.json 2>nul
            echo "Cleanup completed"
          displayName: 'Cleanup temporary files'
          continueOnError: true
          condition: always()

- stage: DeployMonitoringStack
  displayName: 'Instalar Prometheus & Grafana con Helm'
  dependsOn: Terraform_plan_apply_${{ parameters.environment }}
  condition: succeeded()
  jobs:
    - job: InstallMonitoring
      displayName: 'Helm Install kube-prometheus-stack'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: HelmInstaller@1
          inputs:
            helmVersionToInstall: '3.13.3'
        - task: AzureCLI@2
          displayName: 'Login en AKS'
          inputs:
            azureSubscription:  $(AZURE_ACCOUNT)  # Debe estar configurado en Azure DevOps
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing

        - script: |
            echo "üîß Crear namespace monitoring si no existe"
            kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

            echo "üì¶ Agregar repositorio Helm de Prometheus"
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm repo update

            echo "üöÄ Instalar kube-prometheus-stack con configuraci√≥n para Nginx"
            helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
              --namespace monitoring \
              --set grafana.adminPassword='MiPassword123' \
              --set grafana.service.type=ClusterIP \
              --set grafana.env.GF_SERVER_ROOT_URL='http://localhost/grafana/' \
              --set prometheus.service.type=ClusterIP \
              --set prometheus.prometheusSpec.externalUrl='http://localhost/prometheus/'\
              --set prometheus.prometheusSpec.routePrefix='/prometheus'
          displayName: 'Instalar Prometheus y Grafana en monitoring'


- stage: DeployLoggingStack
  displayName: 'Instalar ELK Stack (Elasticsearch, Logstash, Kibana)'
  dependsOn: DeployMonitoringStack
  condition: succeeded()
  jobs:
    - job: InstallELK
      displayName: 'Instalar Elasticsearch, Kibana y Logstash con Helm'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: HelmInstaller@1
          inputs:
            helmVersionToInstall: '3.13.3'
        - task: AzureCLI@2
          displayName: 'Login en AKS'
          inputs:
            azureSubscription: $(AZURE_ACCOUNT)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
        - script: |
            echo "üõ† Crear namespace logging si no existe"
            kubectl create namespace logging --dry-run=client -o yaml | kubectl apply -f -
            
            echo "üßπ Limpiar instalaciones previas"
            helm uninstall elasticsearch -n logging --ignore-not-found
            helm uninstall kibana -n logging --ignore-not-found  
            helm uninstall logstash -n logging --ignore-not-found
            kubectl delete configmap kibana-kibana-helm-scripts -n logging --ignore-not-found
            
            echo "üîê Crear secreto con contrase√±a de elastic"
            kubectl delete secret elastic-credentials -n logging --ignore-not-found
            kubectl create secret generic elastic-credentials --from-literal=password='changeme123' -n logging
            
            echo "üì¶ Agregar repositorio Helm Elastic"
            helm repo add elastic https://helm.elastic.co
            helm repo update
            
            echo "üöÄ Instalar Elasticsearch"
            helm install elasticsearch elastic/elasticsearch \
              --namespace logging \
              --set replicas=1 \
              --set volumeClaimTemplate.storageClassName="" \
              --set volumeClaimTemplate.resources.requests.storage=1Gi \
              --set secret.name=elastic-credentials \
              --set extraEnvs[0].name=ELASTIC_PASSWORD \
              --set extraEnvs[0].valueFrom.secretKeyRef.name=elastic-credentials \
              --set extraEnvs[0].valueFrom.secretKeyRef.key=password \
              --set security.enabled=false \
              --set protocol=http \
              --set resources.requests.cpu=50m \
              --set resources.requests.memory=512Mi \
              --set resources.limits.cpu=200m \
              --set resources.limits.memory=1Gi \
              --set esJavaOpts="-Xms256m -Xmx256m"
              
            echo "‚è≥ Esperar a que Elasticsearch est√© listo (puede tardar varios minutos)"
            kubectl wait --for=condition=ready pod -l app=elasticsearch-master -n logging --timeout=600s || echo "‚ö†Ô∏è Timeout esperando Elasticsearch, continuando..."
            
            echo "üîç Estado actual de Elasticsearch:"
            kubectl get pods -n logging -l app=elasticsearch-master
            kubectl describe pods -n logging -l app=elasticsearch-master | grep -A 10 "Events:"
            
            echo "üöÄ Instalar Kibana"
            helm install kibana elastic/kibana \
              --namespace logging \
              --set elasticsearchHosts="http://elasticsearch-master:9200" \
              --set env.ELASTICSEARCH_USERNAME=elastic \
              --set env.ELASTICSEARCH_PASSWORD=changeme123 \
              --set service.type=ClusterIP \
              --set resources.requests.cpu=50m \
              --set resources.requests.memory=256Mi \
              --set resources.limits.cpu=200m \
              --set resources.limits.memory=512Mi
              
            echo "üìù Crear archivo de configuraci√≥n para Logstash"
            cat <<EOF > values-logstash.yaml
            logstashPipeline:
              logstash.conf: |
                input {
                  beats {
                    port => 5044
                  }
                }
                filter {
                  # A√±adir filtros b√°sicos si es necesario
                  if [fields][service] {
                    mutate {
                      add_field => { "service_name" => "%{[fields][service]}" }
                    }
                  }
                }
                output {
                  elasticsearch {
                    hosts => ["http://elasticsearch-master:9200"]
                    user => "elastic"
                    password => "changeme123"
                    index => "logs-%{+YYYY.MM.dd}"
                  }
                  stdout {
                    codec => rubydebug
                  }
                }
            extraEnvs:
              - name: ELASTIC_USER
                value: elastic
              - name: ELASTIC_PASSWORD
                value: changeme123
              - name: LS_JAVA_OPTS
                value: "-Xms128m -Xmx128m"
            resources:
              requests:
                cpu: 50m
                memory: 256Mi
              limits:
                cpu: 200m
                memory: 512Mi
            logstashJavaOpts: "-Xms128m -Xmx128m"
            service:
              type: ClusterIP
              ports:
                - name: beats
                  port: 5044
                  protocol: TCP
                  targetPort: 5044
            replicas: 1
            EOF
            
            echo "üöÄ Instalar Logstash"
            helm install logstash elastic/logstash \
              --namespace logging \
              -f values-logstash.yaml
              
            echo "‚úÖ Verificar el estado de los pods"
            kubectl get pods -n logging -o wide
            
            echo "üîç Verificar logs si hay problemas:"
            echo "kubectl logs -n logging -l app=elasticsearch-master --tail=20"
            echo "kubectl logs -n logging -l app=kibana --tail=20"
            echo "kubectl logs -n logging -l app=logstash --tail=20"
            
            echo "üîç Mostrar servicios disponibles"
            kubectl get svc -n logging
            
            echo "üìã Informaci√≥n de conexi√≥n:"
            echo "- Elasticsearch: http://elasticsearch-master.logging.svc.cluster.local:9200"
            echo "- Kibana: http://kibana-kibana.logging.svc.cluster.local:5601"
            echo "- Logstash: logstash-logstash-headless.logging.svc.cluster.local:5044"
            echo "- Usuario: elastic"
            echo "- Contrase√±a: changeme123"
            
          displayName: 'Desplegar ELK Stack'